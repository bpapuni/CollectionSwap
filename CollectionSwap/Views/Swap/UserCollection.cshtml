@model CollectionSwap.Models.FindSwapsViewModel
@using CollectionSwap.Models
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Find Swaps";
    UserCollection selectedCollection = ViewBag.SelectedCollection;
    var matchingSwaps = ViewBag.MatchingSwaps;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<main aria-labelledby="title">
    <h2 id="title">@ViewBag.Title</h2>
    <hr />
    <span class="text-success"></span>
    @if (Model.AcceptedSwaps != null && Model.AcceptedSwaps.Any())
    {
        <a href="/Swap/Offers"><h6>You have @(Model.AcceptedSwaps.Count == 1 ? "1 accepted offer" : Model.AcceptedSwaps.Count + " accepted offers")</h6></a>

    }
    @if (Model.OfferedSwaps != null && Model.OfferedSwaps.Any())
    {
        <a href="/Swap/Offers"><h6>You have @(Model.OfferedSwaps.Count == 1 ? "1 swap offer" : Model.OfferedSwaps.Count + " swap offers")</h6></a>

    }
    <div class="secondary-container">
        <h5>Select a collection to find swaps for:</h5>
        @*<hr />*@
        @*User Collection Select*@
        <div class="d-flex gap-5">
            @foreach (UserCollection userCollection in Model.UserCollections)
            {
                <div class="d-flex flex-column align-items-center">
                    @Html.ActionLink(userCollection.Name, "UserCollection", "Swap", new { id = userCollection.Id }, new { @class = "collection user-collection" })
                </div>
            }
        </div>
    </div>
    <br />

    @*Available Swaps*@
    @if (matchingSwaps != null)
    {
        if (matchingSwaps.Count > 0)
        {
            <div class="d-flex flex-column gap-3">
                <div>
                    <h4>Available Swaps You Need:</h4>
                    <h6>(Highest rated first)</h6>
                </div>

                @foreach (var matchingSwap in matchingSwaps)
                {
                    var collection = Model.Collections.Where(col => col.Id == selectedCollection.CollectionId).FirstOrDefault();
                    var senderItemIds = matchingSwap.SenderItemIds;
                    var receiverItemIds = matchingSwap.ReceiverItemIds;
                    var swapSize = Math.Min(matchingSwap.SenderItemIds.Count, matchingSwap.ReceiverItemIds.Count);

                    SwapViewModel model = new SwapViewModel
                    {
                        UserName = matchingSwap.Receiver.UserName,
                        ItemList = JsonConvert.DeserializeObject<List<string>>(collection.ItemListJSON),
                        ImagePath = $"~/Collections/{selectedCollection.CollectionId}",
                        SenderItemIds = senderItemIds,
                        ReceiverItemIds = receiverItemIds,
                        SwapSize = swapSize,
                        Type = "swap"
                    };

                    @Html.Partial("_Swap", model);
                }
            </div>
        }
        else
        {
            <h5> No potential swappers found.</h5>
        }
    }
</main>

@section scripts {
    <script>
        const serializedMatchingSwaps = @Html.Raw(JsonConvert.SerializeObject(matchingSwaps));
        const serializedSelectedCollection = @Html.Raw(JsonConvert.SerializeObject(selectedCollection));
    </script>
    <script src="~/Scripts/swap-ui.js"></script>
}