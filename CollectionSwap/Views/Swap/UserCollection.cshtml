@model CollectionSwap.Models.SwapViewModel
@using CollectionSwap.Models
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Find Swaps";
    UserCollection selectedCollection = ViewBag.SelectedCollection;
    List<(string Email, List<int> yourItems, List<int> theirItems)> potentialSwappers = ViewBag.PotentialSwappers;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<main aria-labelledby="title">
    <h2 id="title">@ViewBag.Title</h2>
    <hr />
    <div class="secondary-container">
        <h5>Select a collection to find swaps for:</h5>
        @*<hr />*@
        @*User Collection Select*@
        <div class="d-flex gap-5">
            @foreach (UserCollection userCollection in Model.UserCollections)
            {
                <div class="d-flex flex-column align-items-center">
                    @Html.ActionLink(userCollection.Name, "UserCollection", "Swap", new { id = userCollection.Id }, new { @class = "collection user-collection" })
                </div>
            }
        </div>
    </div>
    <br />

    @*Available Swaps*@
    @if (potentialSwappers != null)
    {
        if (potentialSwappers.Count > 0)
        {
            <div class="d-flex flex-column gap-3">
                <div>
                    <h4>Available Swaps You Need:</h4>
                    <h6>(Highest rated first)</h6>
                </div>

                @foreach (var potentialSwapper in potentialSwappers)
                {
                    var collection = Model.Collections.Where(col => col.Id == selectedCollection.CollectionId).FirstOrDefault();
                    var itemList = JsonConvert.DeserializeObject<List<string>>(collection.ItemListJSON);
                    var imagePath = $"~/Collections/{selectedCollection.CollectionId}";
                    var swapSize = Math.Min(potentialSwapper.yourItems.Count, potentialSwapper.theirItems.Count);

                    <div class="swap-container">
                        <div class="swap-container-header">
                            <div class="swap-profile">
                                <div class="swap-portrait">Pic</div>
                                <div>
                                    User: @potentialSwapper.Email<br />
                                    <span class="swap-rating">
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="swap-info">
                                Swap <br /> @swapSize for
                                <span class="swap-size">@swapSize</span>
                            </div>
                        </div>
                        <div class="swap-container-body">
                            <div class="swap-container-main">
                                <div class="swap">
                                    <div class="swap-yours">
                                        <span class="swap-heading">Your Swap</span>
                                        <span>Brent will be asked to select @swapSize of your duplicates to swap for.</span>
                                    </div>
                                    <div class="swap-featured-container">
                                        @for (var i = 0; i < swapSize; i++)
                                        {
                                            var fileName = itemList[potentialSwapper.yourItems[i]];
                                            <div class="swap-featured-item">
                                                <img src="@Url.Content(imagePath)/@fileName" alt="">
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="swap">
                                    <div class="swap-theirs">
                                        <span class="swap-heading">Brent's' Swap</span>
                                        <span>The items you'll receive.</span>
                                    </div>
                                    <div class="swap-featured-container">
                                        @for (var i = 0; i < swapSize; i++)
                                        {
                                            var fileName = itemList[potentialSwapper.theirItems[i]];
                                            <div class="swap-featured-item" onclick="selectItem(this)">
                                                <img src="@Url.Content(imagePath)/@fileName" alt="">
                                            </div>
                                        }
                                    </div>
                                </div>
                                <button class="create create-swap visually-hidden" onclick="proposeSwap(this)">Swap</button>
                            </div>
                            <div class="swap-pool-container">
                                <div class="swap-pool-header">
                                    <span class="swap-heading">Swap Pool</span><br />
                                    <span>Select @(swapSize == 1 ? "an item" : swapSize + " items") you'd like.</span>
                                </div>

                                @foreach (var item in potentialSwapper.theirItems)
                                {
                                    var fileName = itemList[item];
                                    <div class="swap-pool-item" onclick="selectPoolItem(this)">
                                        <img src="@Url.Content(imagePath)/@fileName" alt="@item">
                                    </div>
                                }
                                @*<button class="create create-swap" type="submit">Swap</button>*@
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h5> No potential swappers found.</h5>
        }
    }
</main>

@section scripts {
    <script>
        const id = window.location.href.split("UserCollection/")[1];
        const selectedCollection = $(`[href='/Swap/UserCollection/${id}']`);

        if (selectedCollection.length) {
            selectedCollection.addClass("user-collection-selected")
        }

        function selectItem(e) {
            const self = $(e);
            const mainContainer = self.closest(".swap-container-main");
            const poolContainer = mainContainer.next(".swap-pool-container");
            const itemExists = self.hasClass("selected");

            self.removeClass("selected");
            self.toggleClass("selecting");
            mainContainer.toggleClass("dim");

            if (mainContainer.hasClass("dim")) {
                if (itemExists) {
                    const src = self.find("img").attr("src");
                    poolContainer.find(`[src="${src}"]`).parent().show();
                    updatedPoolText(mainContainer, poolContainer);

                }
                poolContainer.toggleClass("highlight", () => {
                    setTimeout(() => {
                        poolContainer.toggleClass("highlight");
                    }, 200);
                });
            }
        }

        function selectPoolItem(e) {
            const poolItem = $(e);
            const poolContainer = poolItem.closest(".swap-pool-container");
            const mainContainer = poolContainer.prev(".swap-container-main");
            const featuredItem = mainContainer.find(".swap-featured-item.selecting");

            featuredItem.toggleClass("selecting");

            if (mainContainer.hasClass("dim")) {
                const newSrc = poolItem.find("img").attr("src");
                const newAlt = poolItem.find("img").attr("alt");

                mainContainer.removeClass("dim");
                featuredItem.addClass("selected");
                featuredItem.find("img").attr("src", newSrc);
                featuredItem.find("img").attr("alt", newAlt);
                poolItem.hide();
            }

            updatedPoolText(mainContainer, poolContainer);
        }

        function updatedPoolText(mainContainer, poolContainer) {
            const swapperIndex = $(".swap-container-main").index(mainContainer);
            const swapper = @Html.Raw(JsonConvert.SerializeObject(potentialSwappers));
            const swapSize = mainContainer.closest(".swap-container").find(".swap-size").text();

            const itemsSelected = mainContainer.find(".swap-featured-item.selected").length;
            const remainingSelections = swapSize - itemsSelected;
            const poolText = poolContainer.find("span").eq(1);
            const swapButton = mainContainer.find(".create-swap");

            console.log(remainingSelections)
            switch (remainingSelections) {
                case 1:
                    poolText.text(`Select ${remainingSelections} item you'd like.`);
                    swapButton.addClass("visually-hidden");
                    break;
                case 0:
                    poolText.text("All selections made.");
                    swapButton.removeClass("visually-hidden");
                    swapButton.toggleClass("highlight", () => {
                        setTimeout(() => {
                            swapButton.toggleClass("highlight");
                        }, 200);
                    });
                    break;
                default:
                    poolText.text(`Select ${remainingSelections} items you'd like.`);
                    swapButton.addClass("visually-hidden");
                    break;
            }
        }

        function proposeSwap(e) {
            const swapButton = $(e);
            console.log(swapButton);
        }
    </script>
}