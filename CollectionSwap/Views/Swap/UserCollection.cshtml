@model CollectionSwap.Models.FindSwapsViewModel
@using CollectionSwap.Models
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Find Swaps";
    UserCollection selectedCollection = ViewBag.SelectedCollection;
    var matchingSwaps = ViewBag.MatchingSwaps;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="find-swaps-container">
    <span class="header">Find Swaps</span>
    <hr />
    <span class="text-success"></span>
    <section class="column">
        @if (Model.AcceptedSwaps != null && Model.AcceptedSwaps.Any())
        {
            <a href="/Swap/Offers"><h3>You have @(Model.AcceptedSwaps.Count == 1 ? "1 accepted offer" : Model.AcceptedSwaps.Count + " accepted offers")</h3></a>

        }
        @if (Model.OfferedSwaps != null && Model.OfferedSwaps.Any())
        {
            <a href="/Swap/Offers"><h3>You have @(Model.OfferedSwaps.Count == 1 ? "1 swap offer" : Model.OfferedSwaps.Count + " swap offers")</h3></a>
        }
        <h2>Select a collection to find swaps for:</h2>
        <hr />
        <div class="row gap-2">
            @foreach (UserCollection userCollection in Model.UserCollections)
            {
                @Html.ActionLink(userCollection.Name, "UserCollection", "Swap", new { id = userCollection.Id }, new { @class = "collection user-collection" })
            }
        </div>
        <br />

        @*Available Swaps*@
        @if (matchingSwaps != null)
        {
            if (matchingSwaps.Count > 0)
            {
                <div class="column min-width-100 gap-4">
                    <div>
                        <h3>Available Swaps:</h3>
                    </div>

                    @foreach (var matchingSwap in matchingSwaps)
                    {
                        var collection = Model.Collections.Where(col => col.Id == selectedCollection.CollectionId).FirstOrDefault();
                        var senderItemIds = matchingSwap.SenderItemIds;
                        var receiverItemIds = matchingSwap.ReceiverItemIds;
                        var swapSize = Math.Min(matchingSwap.SenderItemIds.Count, matchingSwap.ReceiverItemIds.Count);

                        SwapViewModel model = new SwapViewModel
                        {
                            UserName = matchingSwap.Receiver.UserName,
                            Rating = 5,
                            ItemList = JsonConvert.DeserializeObject<List<string>>(collection.ItemListJSON),
                            ImagePath = $"~/Collections/{selectedCollection.CollectionId}",
                            SenderItemIds = senderItemIds,
                            ReceiverItemIds = receiverItemIds,
                            SwapSize = swapSize,
                            Type = "swap"
                        };

                        @Html.Partial("_Swap", model);
                    }
                </div>
            }
            else
            {
                <h5> No potential swappers found.</h5>
            }
        }
    </section>
</div>

@section scripts {
    <script>
        const id = window.location.href.split("UserCollection/")[1];
        const selectedCollection = $(`[href='/Swap/UserCollection/${id}']`);

        if (selectedCollection.length) {
            selectedCollection.addClass("user-collection-selected")
        }

        const serializedMatchingSwaps = @Html.Raw(JsonConvert.SerializeObject(matchingSwaps));
        const serializedSelectedCollection = @Html.Raw(JsonConvert.SerializeObject(selectedCollection));
    </script>
    <script src="~/Scripts/swap-ui.js"></script>
}