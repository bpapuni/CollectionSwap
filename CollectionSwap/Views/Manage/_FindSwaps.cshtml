@model CollectionSwap.Models.FindSwapsViewModel
@using CollectionSwap.Models
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Find Swaps";
    var matchingSwaps = ViewBag.MatchingSwaps;
    var selectedCollection = ViewBag.SelectedCollection;
    string statusMessage = ViewBag.Status;
}

<div id="find-swaps-container" class="@(matchingSwaps == null || matchingSwaps.Count == 0 ? "no-swaps" : "")">
    @if (!String.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message">@statusMessage</div>
    }
    <span class="header">Find Swaps</span>
    <br />
    <section class="column">
        @if (Model.AcceptedSwaps != null && Model.AcceptedSwaps.Any())
        {
            <a href="/Swap/Offers"><h3>You have @(Model.AcceptedSwaps.Count == 1 ? "1 accepted offer" : Model.AcceptedSwaps.Count + " accepted offers")</h3></a>

        }
        @if (Model.OfferedSwaps != null && Model.OfferedSwaps.Any())
        {
            <a href="/Swap/Offers"><h3>You have @(Model.OfferedSwaps.Count == 1 ? "1 swap offer" : Model.OfferedSwaps.Count + " swap offers")</h3></a>
        }
        <h2>Select a collection to find swaps for:</h2>
        <br />
        <div class="row gap-2">
            @foreach (UserCollection userCollection in Model.UserCollections)
            {
                @Html.ActionLink(userCollection.Name, "FindSwaps", "Manage", new { id = userCollection.Id }, new { @class = $"user-collection {(selectedCollection != null && userCollection.Id == selectedCollection.Id ? "selected" : "")}" })
            }
        </div>
        <br />

        @*Available Swaps*@
        @if (matchingSwaps != null)
        {
            if (matchingSwaps.Count > 0)
            {
                <div class="column gap-1 min-width-100">
                    <h3>Available Swaps:</h3>

                    @foreach (var matchingSwap in matchingSwaps)
                    {
                        var collection = Model.Collections.Where(col => col.Id == selectedCollection.CollectionId).FirstOrDefault();
                        var senderItemIds = matchingSwap.SenderItemIds;
                        var receiverItemIds = matchingSwap.ReceiverItemIds;
                        var swapSize = Math.Min(matchingSwap.SenderItemIds.Count, matchingSwap.ReceiverItemIds.Count);
                        var feedbacks = Model.Feedbacks?.Where(fb => fb.ReceiverId == matchingSwap.Receiver.Id).ToList();
                        var rating = feedbacks.Any() ? Math.Round(feedbacks.Select(fb => fb.Rating).Average() * 2) / 2 : -1;

                        SwapViewModel model = new SwapViewModel
                        {
                            Id = matchingSwap.Receiver.Id,
                            UserName = matchingSwap.Receiver.UserName,
                            Rating = rating,
                            CollectionId = selectedCollection.CollectionId,
                            ItemList = JsonConvert.DeserializeObject<List<string>>(collection.ItemListJSON),
                            SenderCollectionId = selectedCollection.Id,
                            ReceiverCollectionId = matchingSwap.UserCollectionId,
                            SenderItemIds = senderItemIds,
                            ReceiverItemIds = receiverItemIds,
                            SwapSize = swapSize,
                            Type = "swap"
                        };

                        @Html.Partial("_Swap", model);
                    }
                </div>
            }
            else
            {
                <div class="swap-none-found">
                    <img src="~/Content/images/doodles/14.png" />
                    <span>Sorry, no macthes found</span>
                </div>
            }
        }
    </section>
</div>
