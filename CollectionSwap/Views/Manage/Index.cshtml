@model CollectionSwap.Models.IndexViewModel
@using CollectionSwap.Models
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Mange Your Account";
}


<div class="manage-container">
    <div class="manage-container-nav">
        <ul class="">
            <li>@Html.ActionLink("Swapper", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })</li>
            <li>@Html.ActionLink("Account", "Account", "Manage", new { area = "" }, new { @class = "subnav-link" })</li>
            @if (User.IsInRole("Admin"))
            {
                <li>@Html.ActionLink("Manage Collections", "ManageCollections", "Manage", new { area = "" }, new { @class = "subnav-link" })</li>
            }
            <li>@Html.ActionLink("Your Collections", "YourCollections", "Manage", new { area = "" }, new { @class = "subnav-link" })</li>
            <li>@Html.ActionLink("Swap History", "SwapHistory", "Manage", new { area = "" }, new { @class = "subnav-link" })</li>
        </ul>
    </div>
    <div class="manage-container-main">
    </div>
</div>

@section scripts {
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.1.1/chroma.min.js"></script>*@
    <script>
        const navUl = $(".manage-container-nav ul");
        const subNavLinks = $(".subnav-link");
        var scrollTop = $(window).scrollTop();

        // Map the values of our partial views to an array
        const partialNames = subNavLinks.map(function () {
            return $(this).text().replace(' ', '');
        }).get();

        // Get the current partial views name and id if there is one
        var partialName = location.pathname.split("/Manage/").pop().split("/")[0];
        var partialId = location.pathname.split("/Manage/").pop().split("/")[1];

        // If user has navigated to a page not within our partialNames array redirect them them to the Account partial
        if (!partialNames.includes(partialName)) {
            partialName = "Account";
        }

        // Find the link index of the the currently active partial view
        var selectedNavLink = subNavLinks.parent().find(`[href='/Manage/${partialName}']`)
        var selectedIndex = subNavLinks.index(selectedNavLink) + 1;

        // Animate the link highlight to the correct position
        navUl.removeClass("selected-1 selected-2 selected-3 selected-4");
        navUl.addClass(`selected-${selectedIndex}`);

        // Display the partial view
        LoadPartial(partialName, `/Manage/${partialName}`)
        if (partialId) {
            const formData = new FormData();
            const collectionType = partialName.replace("ManageCollections", "EditCollection").replace("YourCollections", "UserCollection");
            formData.append("id", partialId);

            HandleFormSubmit(`/Manage/${collectionType}`, "POST", formData);
        }

        // On back/forward navigation update the partial name and display the corresponding view
        $(window).on("popstate", function (e) {
            //partialName = e.originalEvent.state ? e.originalEvent.state.partialName : "Account";
            partialName = partialName == "Index" ? "Account" : location.pathname.split("/Manage/").pop().split("/")[0]
            partialId = location.pathname.split("/Manage/").pop().split("/")[1];
            LoadPartial(partialName, `/Manage/${partialName}`)
            if (partialId) {
                const formData = new FormData();
                const collectionType = partialName.replace("ManageCollections", "EditCollection").replace("YourCollections", "UserCollection");
                formData.append("id", partialId);

                HandleFormSubmit(`/Manage/${collectionType}`, "POST", formData);
            }
        });

        // Automatically submit the form when changing an items image
        $(document).on("change", "#items input[type='file']", function () {
            $(this).closest("form").submit();
        });

        // Subnav click listeners
        $(document).on("click", ".subnav-link", function (event) {
            event.preventDefault();
            const url = $(this).attr("href").split("/Manage/").pop().split("/");
            partialName = url[0];
            partialId = url[1] == '#' ? '' : url[1];

            const historyEntry = partialId == undefined ? partialName : `${partialName}/${partialId}`;
            history.pushState({ partialName: historyEntry }, null, `/Manage/${historyEntry}`);

            LoadPartial(partialName, $(this).attr("href"));
        });

        // Anchor click listeners
        $(document).on("click", "a.collection-button", function (event) {
            event.preventDefault();
            const url = $(this).attr("href").split("/Manage/").pop().split("/");
            partialName = url[0];
            partialId = url[1] == '#' ? '' : url[1];

            const historyEntry = partialId == undefined ? partialName : `${partialName}/${partialId}`;
            history.pushState({ partialName: historyEntry }, null, `/Manage/${historyEntry}`);

            const formData = new FormData();
            formData.append("id", partialId);

            const collectionType = partialName.replace("ManageCollections", "EditCollection").replace("YourCollections", "UserCollection");
            HandleFormSubmit(`/Manage/${collectionType}`, "POST", formData);
        });

        // Form submit listeners Handle loading form submission partial views
        $(document).on("submit", ".manage-container-main form", function (event) {
            event.preventDefault();
            HandleFormSubmit($(this).attr("action"), $(this).attr("method"), new FormData(this));
        });

        // Handle loading the navigation partial views
        function LoadPartial(partialName, url) {
            selectedNavLink = subNavLinks.parent().find(`[href='/Manage/${partialName.split("/")[0]}']`)
            selectedIndex = subNavLinks.index(selectedNavLink) + 1;
            navUl.removeClass("selected-1 selected-2 selected-3 selected-4");
            navUl.addClass(`selected-${selectedIndex}`);

            //console.log(`${url}Partial`);
            $.ajax({
                url: `${url}Partial`,
                type: "POST",
                success: function (result) {
                    $('.manage-container-main').html(result.PartialView);
                    //if (partialId) {
                    //    const collection = partialName.replace("ManageCollections", "EditCollection").replace("YourCollections", "UserCollection");
                    //    HandleFormSubmit(`/Manage/${collection}/${partialId}`, "GET", null);
                    //}
                },
                error: function () {
                    // Handle error
                }
            });
        }

        function HandleFormSubmit(url, type, formData) {
            $.ajax({
                url: url,
                type: type,
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {
                    var partialView = result.PartialView;
                    
                    if (result.RefreshTargets) {
                        $.each(result.RefreshTargets, function (key, target) {
                            if (`#${$(partialView)[0].id}` === target) {
                                $(`${target}`).prop("outerHTML", $(partialView).prop("outerHTML"));
                            } else {
                                $(`${target}`).prop("outerHTML", $(partialView).find(target).prop("outerHTML"));
                            }
                            $(`${target}`).removeClass("d-none");
                        });
                    }
                    //} else if (partialView) {
                    //    var target = $(result.PartialView)[0].id;
                    //    //console.log(result.PartialView);
                    //    $(`#${target}`).prop("outerHTML", $(partialView).prop("outerHTML"));
                    //}

                    if (result.ScrollTarget) {
                        var offset = $(result.ScrollTarget).prop("offsetLeft");
                        $(result.ScrollTarget).parent().css("scroll-snap-type", "none");

                        $(result.ScrollTarget).parent().animate({ scrollLeft: offset }, 250, "swing", () => {
                            $(document).scrollTop(0);
                            $(result.ScrollTarget).parent().css("scroll-snap-type", "x mandatory")
                        });
                    }
                },
                error: function () {
                    // Handle error
                }
            });
        }

        function ScrollRowBack(e) {
            var scrollRow = $(e).closest(".scroll-snap-row");
            scrollRow.css("scroll-snap-type", "none");

            scrollRow.animate({ scrollLeft: 0 }, 250, "swing", () => {
                $(document).scrollTop(0);
                scrollRow.css("scroll-snap-type", "x mandatory")
                scrollRow.eq(0).children().eq(1).addClass("d-none");
            });
        }

        $(document).on("click", ".counter-add, .counter-minus", function () {
            let input = $(this).parent().find("[name='quantity']");
            let itemId = input.prop("id");
            let change = $(this).hasClass("counter-add") ? 1 : -1;
            let quantity = (+input.val() + change) > 0 ? (+input.val() + change) > 99 ? 99 : +input.val() + change : 0;

            input.val(quantity);
            if (quantity == 0) {
                $(this).parent().parent().parent().prev().addClass("item-not-owned");
            }
            if (quantity == 1) {
                $(this).parent().parent().parent().prev().removeClass("item-not-owned");
            }
        })

        $(document).on("input", "#user-collection-container [type='number']", function () {
            let input = $(this);
            let itemId = input.prop("id");
            let quantity = +input.val()

            if (quantity < 0) {
                input.val(0);
                $(this).parent().parent().parent().prev().removeClass("item-not-owned");
            }
        })

            //function ColourButtons() {
            //    const buttons = $('input[type="submit"]');

            //    buttons.each(function () {
            //        const baseHue = Math.random() * 360;
            //        const vibrantColor = chroma.hsl(baseHue, 30, 74); // Adjust saturation and lightness as needed
            //        const buttonColor = vibrantColor.hex(); // Convert Chroma color to HEX format
            //        const textColor = chroma.contrast(buttonColor, 'white') > 4.5 ? 'white' : 'black';
            //        $(this).css('background-color', buttonColor);
            //        $(this).css('color', textColor);
            //    });
            //}

                //const paintBlotches = document.querySelector('.manage-container-main');
                //const numBlotches = 30; // Adjust the number of blotches as needed

                //for (let i = 0; i < numBlotches; i++) {
                //    const blotch = document.createElement('div');
                //    const baseHue = Math.random() * 360;
                //    const vibrantColor = chroma.hsl(baseHue, 30, 74); // Adjust saturation and lightness as needed

                //    blotch.classList.add('paint-blotch');
                //    blotch.style.left = `${Math.random() * 100}%`;
                //    blotch.style.top = `${Math.random() * 100}%`;
                //    blotch.style.scale = `${Math.random() * 100}%`;
                //    blotch.style.backgroundColor = vibrantColor;
                //    //blotch.style.borderRadius = `${Math.random() * 100}% ${Math.random() * 100}% ${Math.random() * 100}% ${Math.random() * 100}% / ${Math.random() * 100}% ${Math.random() * 100}% ${Math.random() * 100}% ${Math.random() * 100 }%`
                //    //blotch.style.animation = `animateBlotches ${(Math.random() * 3 + 2).toFixed(1)}s ${(Math.random() * 3).toFixed(1)}s infinite alternate`;
                //    paintBlotches.appendChild(blotch);
                //}
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}