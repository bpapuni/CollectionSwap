@model CollectionSwap.Models.IndexViewModel
@using CollectionSwap.Models;
@using Newtonsoft.Json;
@{
    string statusMessage = ViewBag.Status;
    string errorMessage = ViewBag.Error;
    var recentFeedback = Model.RecentFeedback;
}

<div class="scroll-snap-row">
    <div class="status-container">
        @if (!String.IsNullOrEmpty(statusMessage))
        {
            <div class="status-message">@statusMessage</div>
        }
        else if (!String.IsNullOrEmpty(errorMessage))
        {
            <div class="status-message error">@errorMessage</div>
        }
    </div>
    <div class="page-navigation">
        <span class="header d-none"></span>
    </div>
    <div data-nav="Account" id="account-container">
        <section class="gap-2">
            <div>
                <span class="header">Change Email</span>
                @using (Html.BeginForm("ChangeEmail", "Manage", null, FormMethod.Post, new { id = "change-email-form" }))
                {
                    <div>
                        @Html.AntiForgeryToken()
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangeEmail.OldEmail)
                                @Html.TextBoxFor(m => m.ChangeEmail.OldEmail)
                                @Html.ValidationMessageFor(m => m.ChangeEmail.OldEmail)
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangeEmail.NewEmail)
                                @Html.TextBoxFor(m => m.ChangeEmail.NewEmail)
                                @Html.ValidationMessageFor(m => m.ChangeEmail.NewEmail)
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangeEmail.ConfirmEmail)
                                @Html.TextBoxFor(m => m.ChangeEmail.ConfirmEmail)
                                @Html.ValidationMessageFor(m => m.ChangeEmail.ConfirmEmail)
                            </div>
                        </div>
                        <span class="success-message">@ViewBag.ChangeEmailStatus</span>
                    </div>
                    <input class="submit-button" type="submit" value="Update Email" />
                }
            </div>
            <div>
                <span class="header">Change Password</span>
                <form action="/Manage/ChangePassword" id="change-password-form" method="post">
                    <div>
                        @Html.AntiForgeryToken()
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangePassword.OldPassword)
                                @Html.TextBoxFor(m => m.ChangePassword.OldPassword, new { type = "password" })
                                @Html.ValidationMessageFor(m => m.ChangePassword.OldPassword)
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangePassword.NewPassword)
                                @Html.TextBoxFor(m => m.ChangePassword.NewPassword, new { type = "password" })
                                @Html.ValidationMessageFor(m => m.ChangePassword.NewPassword)
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ChangePassword.ConfirmPassword)
                                @Html.TextBoxFor(m => m.ChangePassword.ConfirmPassword, new { type = "password" })
                                @Html.ValidationMessageFor(m => m.ChangePassword.ConfirmPassword)
                            </div>
                        </div>
                        @if (ViewData.ModelState.ContainsKey("ChangePassword"))
                        {
                            <ul>
                                @foreach (var error in ViewData.ModelState["ChangePassword"].Errors)
                                {
                                    <li class="field-validation-error">
                                        @error.ErrorMessage
                                    </li>
                                }
                            </ul>
                        }

                        <span class="success-message">@ViewBag.ChangePasswordStatus</span>
                    </div>
                    <input class="submit-button" type="submit" value="Update Password" />
                </form>
            </div>
        </section>

        <span class="header">
            Mailing Address
        </span>

        <section>
            @using (Html.BeginForm("ChangeAddress", "Manage", FormMethod.Post))
            {
                <div>
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="form-group">
                            <span>
                                <strong>Keep it Safe:</strong>
                                Consider using a business address or P.O. box for mailing collectibles, ensuring your home address remains private.
                            </span><br />
                        </div>
                    </div>
                    <div class="row gap-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.FullName)
                            @Html.TextBoxFor(m => m.ChangeAddress.FullName)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.FullName)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.CompanyName)
                            @Html.TextBoxFor(m => m.ChangeAddress.CompanyName)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.CompanyName)
                        </div>
                    </div>
                    <div class="row gap-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.LineOne)
                            @Html.TextBoxFor(m => m.ChangeAddress.LineOne)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.LineOne)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.LineTwo)
                            @Html.TextBoxFor(m => m.ChangeAddress.LineTwo)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.LineTwo)
                        </div>
                    </div>
                    <div class="row gap-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.PostCode)
                            @Html.TextBoxFor(m => m.ChangeAddress.PostCode)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.PostCode)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.ChangeAddress.City)
                            @Html.TextBoxFor(m => m.ChangeAddress.City)
                            @Html.ValidationMessageFor(m => m.ChangeAddress.City)
                        </div>
                    </div>
                    <div class="form-group">
                        @if (ViewData.ModelState.ContainsKey("ChangeAddress"))
                        {
                            <ul>
                                @foreach (var error in ViewData.ModelState["ChangeAddress"].Errors)
                                {
                                    <li class="text-danger">
                                        @error.ErrorMessage
                                    </li>
                                }
                            </ul>
                        }

                    </div>
                </div>
                <input class="submit-button" type="submit" value="Update Address" />
            }
        </section>

        @if (recentFeedback != null && recentFeedback.Count > 0)
        {
            <span class="header">
                Recent Feedback
            </span>


            <section class="feedback">
                <a class="view-all-feedback-button load-content" href="/Manage/Member/@recentFeedback[0].Receiver.UserName">View all feedback</a>
                <div>
                    @foreach (var feedback in recentFeedback)
                    {
                        var comments = JsonConvert.DeserializeObject<List<string>>(feedback.Comments);
                        var positiveComments = Feedback.PositiveComments;
                        var negativeComments = Feedback.NegativeComments;
                        <div>
                            <div class="rating">
                                @for (int i = 0; i < feedback.Rating; i++)
                                {
                                    <i class="fa fa-star"></i>
                                }
                                @for (int i = 0; i < 5 - feedback.Rating; i++)
                                {
                                    <i class="fa-regular fa-star"></i>
                                }
                            </div>
                            <div class="comments">
                                @if (comments.Count == 0)
                                {
                                    <text>User chose not to leave any comments</text>
                                }
                                else
                                {
                                    <ul class="feedback-list disabled">
                                        @foreach (var comment in comments)
                                        {
                                            <li class="@(positiveComments.Contains(comment) ? "positive" : negativeComments.Contains(comment) ? "negative" : "")">@comment</li>
                                        }
                                </ul>

                            }
                            </div>
                            <div class="profile">
                                <span>
                                    <strong>By: <a class="load-content" href="/Manage/Member/@feedback.Sender.UserName">@feedback.Sender.UserName</a></strong>@Html.Partial("_Rating", @feedback.Sender.Rating)<br />
                                </span>
                                @feedback.DatePlaced.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                    }
                </div>
            </section>
        }

        @if (User.IsInRole("User"))
        {

        <div class="close-account">
            <div class="column">
                <strong>Close account</strong>
                Close this account and cancel any outstanding swaps.
            </div>
            <button class="submit-button cancel" onclick="Prompt(this, true)">Close Account</button>
            @Html.Partial("_Prompt", new PromptViewModel { Title = "Account Closure Disclaimer", Body =
                "<p>Before you proceed with closing your account, please take a moment to review the following important information:</p>" +
                "<ul><li>Any swaps that are already confirmed (both by you and the other party involved) must be completed and have feedback provided.</li>" +
                "<li>Any swaps that you have requested or accepted but haven't been confirmed by both parties will be automatically canceled when you close your account. These swaps will not be completed or honored.</li></ul>" +

                "<p>Are you sure you wish to continue?</p>", Action = "CloseAccount(this)" })
        </div>
        }
    </div>

    <div data-nav="Member Profile" id="profile-container" class="d-none">
        @if (ViewBag.ViewProfile == true)
        {
            @Html.Partial("_Profile")
        }
    </div>
</div>
