@model CollectionSwap.Models.SwapViewModel
@using Newtonsoft.Json;
@{
    var sender = Model.Swap.Sender;
    var receiver = Model.Swap.Receiver;
    var collectionId = Model.Swap.Collection.Id;
    var itemList = JsonConvert.DeserializeObject<List<string>>(Model.Swap.Collection.ItemListJSON);
    var senderCollectionId = Model.Swap.SenderCollection.Id;
    var senderItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.SenderCollection.ItemCountJSON);
    var senderRequestedItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.SenderRequestedItems);
    var receiverCollectionId = Model.Swap.ReceiverCollection.Id;
    var receiverItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.ReceiverCollection.ItemCountJSON);
    var receiverRequestedItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.ReceiverRequestedItems);
    var swapSize = Model.Swap.SwapSize;
    var swapStatus = Model.Swap.Status;

    var userId = sender.Id;
    var otherUserId = receiver.Id;
    var otherUserName = receiver.UserName;
    var rating = swapStatus == "charity" ? sender.Rating : userId == sender.Id ? receiver.Rating : sender.Rating;
    var Validation = Model.Validation;
}

@* Create swap container *@
<div class="swap-container" data-collection-id="@collectionId" data-sender-collection-id="@senderCollectionId" data-receiver-collection-id="@receiverCollectionId">

    @* Container Header *@
    <div class="swap-container-header">
        <div class="swap-info">
            @if (swapStatus.Contains("charity"))
            {
                <span class="header">Charity</span>
            }
            else if (swapStatus == "swap")
            {
                <span class="swap-size">@swapSize</span>
                <span>for @swapSize Swap</span>
            }
        </div>
        <div class="swap-profile" data-user-id="@(swapStatus == "charity" ? sender.Id : receiver.Id)">
            <div class="rating">
                @if (swapStatus == "charity")
                {
                    <span class="header">
                        Donation from <a class="load-content" href="/Manage/Member/@sender.UserName">@sender.UserName</a>
                    </span>
                }
                else if (swapStatus == "swap")
                {
                    <span class="header">
                        Swap with <a class="load-content" href="/Manage/Member/@otherUserName">@otherUserName</a>
                    </span>
                }

                @Html.Partial("_Rating", rating)
            </div>
        </div>
    </div>

    @* Container Body *@
    <div class="swap-container-body">

        @if (swapStatus == "charity")
        {
            @* Top row of swap *@
            <div class="selection-pool">
                <div>
                    <span class="header">@sender.UserName is giving these items away</span>
                </div>

                <div class="swap-items">
                    @foreach (var itemId in senderRequestedItems) // Opposite to normal, we actually need to display the items you'd normally request
                    {
                        <div class="swap-item @(Validation.DuplicateRequestItems.Contains(itemId) ? "attention" : "")" onclick="SelectItem(this)">
                            <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                            @if (@senderItems[itemId] > 1)
                            {
                                <div class="charity-item-count">
                                    <strong>x</strong>
                                    @senderItems[itemId]
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            @* Hidden, your selection *@
            <div class="your-selection d-none">
                <span class="header">Your Selection</span>
                <div class="swap-items">
                    @for (var i = 0; i < swapSize; i++)
                    {
                        <div class="swap-item placeholder" onclick="ClearItem(this)">
                            <img src="" />
                        </div>
                    }
                </div>
            </div>

            @* Hidden, second row of swap *@
            <div class="selection-pool your-items d-none">
                <span class="header">@otherUserName will be offered to select @swapSize of your items</span>

                @* Display any duplicate item request warnings *@
                <span class="duplicate-missing-items-error">
                    @if (Validation.LowInventoryItems.Count > 0)
{
    @Html.Raw("<i class=\"fa-solid fa-circle-exclamation\"></i> You've already offered the marked item(s) to another/other user(s).<br />\r\n" +
   "You will not have enough duplicates to complete all requested swaps (this included).")
}
                </span>

                <div class="swap-items">
                    @foreach (var itemId in senderRequestedItems)
                    {
                        <div class="swap-item @(Validation.LowInventoryItems.Contains(itemId) ? "attention" : "")">
                            <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                        </div>
                    }
                </div>
            </div>
        }
        else if (swapStatus == "swap")
        {
            @* Top row of swap *@
            <div class="selection-pool">
                <div>
                    <span class="header">Select @swapSize of @otherUserName's items</span>
                    <button class="swap-your-items-button @(Validation.LowInventoryItems.Count > 0 ? "selected" : null)" onclick="ToggleSwapItems(this)"><i class="fa-solid fa-file"></i><text>Your Items</text></button>
                </div>

                @* Display any duplicate item request warnings *@
                <span class="duplicate-missing-items-error">
                    @if (Validation.DuplicateRequestItems.Count > 0)
                    {
                        @Html.Raw("<i class=\"fa-solid fa-circle-exclamation\"></i> You've already requested the marked item(s) from another user.")
                    }
                </span>

                <div class="swap-items">
                    @foreach (var itemId in receiverRequestedItems)
                    {
                        <div class="swap-item swap-request-item @(Validation.DuplicateRequestItems.Contains(itemId) ? "attention" : "")" onclick="SelectItem(this)">
                            <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                        </div>
                    }
                </div>
            </div>

            @* Hidden, your selection *@
            <div class="your-selection d-none">
                <span class="header">Your Selection</span>
                <div class="swap-items">
                    @for (var i = 0; i < swapSize; i++)
                    {
                        <div class="swap-item placeholder" onclick="ClearItem(this)">
                            <img src="" />
                        </div>
                    }
                </div>
            </div>

            @* Hidden, second row of swap *@
            <div class="selection-pool your-items @(Validation.LowInventoryItems.Count > 0 ? null : "d-none")">
                <span class="header">@otherUserName will be offered to select @swapSize of your items</span>

                @* Display any duplicate item request warnings *@
                <span class="duplicate-missing-items-error">
                    @if (Validation.LowInventoryItems.Count > 0)
{
    @Html.Raw("<i class=\"fa-solid fa-circle-exclamation\"></i> You've already offered the marked item(s) to another/other user(s).<br />\r\n" +
   "You will not have enough duplicates to complete all requested swaps (this included).")
}
                </span>

                <div class="swap-items">
                    @foreach (var itemId in senderRequestedItems)
                    {
                        <div class="swap-item @(Validation.LowInventoryItems.Contains(itemId) ? "attention" : "")">
                            <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                        </div>
                    }
                </div>
            </div>
        }

    </div>
</div>
@if (swapStatus == "charity")
{
    if (receiver.Address == null)
    {
        <input type="button" class="submit-button charity" disabled value="Request Items" />
    }
    else
    {
        <button class="submit-button charity" onclick="RequestDonation(this)">Request Items</button>
    }
}
else if (swapStatus == "swap")
{
    if (sender.Address == null)
    {
        <input type="button" class="submit-button offer" disabled value="Items Selected (0/@swapSize)" />
    }
    else
    {
        <button class="submit-button offer" onclick="RequestSwap(this)" disabled>Items Selected (0/@swapSize)</button>
    }
}