@model CollectionSwap.Models.SwapViewModel
@using Microsoft.AspNet.Identity
@using Newtonsoft.Json;
@{
    var Sender = Model.Swap.Sender;
    var Receiver = Model.Swap.Receiver;
    var collectionId = Model.Swap.CollectionId;
    var itemList = JsonConvert.DeserializeObject<List<string>>(Model.Swap.Collection.ItemListJSON);
    var senderCollectionId = Model.Swap.SenderCollectionId;
    var senderItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.SenderCollection.ItemCountJSON);
    var senderRequestedItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.SenderRequestedItems);
    var receiverCollectionId = Model.Swap.ReceiverCollectionId;
    var receiverItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.ReceiverCollection.ItemCountJSON);
    var receiverRequestedItems = JsonConvert.DeserializeObject<List<int>>(Model.Swap.ReceiverRequestedItems);
    var swapSize = Model.Swap.SwapSize;
    var swapStatus = Model.Swap.Status;

    var userId = Sender.Id;
    var otherUserId = Receiver.Id;
    var otherUserName = Receiver.UserName;
    var rating = Model.Rating;
    var Validation = Model.Validation;
}

@* Create swap container *@
<div class="swap-container" data-collection-id="@collectionId" data-sender-collection-id="@senderCollectionId" data-receiver-collection-id="@receiverCollectionId">

    @* Container Header *@
    <div class="swap-container-header">
        <div class="swap-info">
            <span class="swap-size">@swapSize</span>
            <span>Swap for @swapSize</span>
        </div>
        <div class="swap-profile" data-user-id="@otherUserId">
            <div>
                <span class="header">Swap with @otherUserName</span>
                @if (rating == -1)
                {
                    <span class="new">New</span>
                }
                <span class="swap-rating">
                    @for (int i = 0; i < Math.Floor(rating); i++)
                    {
                        <i class="fa fa-star"></i>
                    }
                    @if (rating % 1 == 0.5)
                    {
                        <i class="fa fa-star-half"></i>
                    }
                </span>
            </div>
            <div class="swap-portrait">Pic</div>
        </div>
    </div>

    @* Container Body *@
    <div class="swap-container-body">

        @* Top row of swap *@
        <div class="selection-pool">
            <div>
                <span class="header">Select @swapSize of @otherUserName's items</span>
                <button class="swap-your-items-button" onclick="ToggleSwapItems(this)"><i class="fa-solid fa-file"></i><text>Your Items</text></button>
            </div>

            @* Display any duplicate item request warnings *@
            <span class="duplicate-missing-items-error">
                @if (Validation.DuplicateRequestItems.Count > 0)
                {
                    <text><i class="fa-solid fa-circle-exclamation"></i> You have already requested the marked item(s) from another user.</text>
                }
            </span>

            <div class="swap-items">
                @foreach (var itemId in receiverRequestedItems)
                {
                    <div class="swap-item swap-request-item @(Validation.DuplicateRequestItems.Contains(itemId) ? "attention" : "")" onclick="SelectItem(this)">
                        <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                    </div>
                }
            </div>
        </div>

        @* Hidden, your selection *@ 
        <div class="your-selection d-none">
            <span class="header">Your Selection</span>
            <div class="swap-items">
                @for (var i = 0; i < swapSize; i++)
                {
                    <div class="swap-item placeholder" onclick="ClearItem(this)">
                        <img src="" />
                    </div>
                }
            </div>
        </div>

        @* Hidden, second row of swap *@
        <div class="selection-pool your-items d-none">
            <span class="header">@otherUserName will be offered to select @swapSize of your items</span>

            @* Display any duplicate item request warnings *@
            <span class="duplicate-missing-items-error">
                @if (Validation.LowInventoryItems.Count > 0)
                {
                    <text><i class="fa-solid fa-circle-exclamation"></i> One or more users have already requested the marked item(s) from you.<br />
                    You currently will have enough duplicates to complete all requested swaps (this included).</text>
                }
            </span>

            <div class="swap-items">
                @foreach (var itemId in senderRequestedItems)
                {
                    <div class="swap-item @(Validation.LowInventoryItems.Contains(itemId) ? "attention" : "")">
                        <img data-item-id="@itemId" src="@Url.Content("/Collections/" + @collectionId + '/' + @itemList[itemId])" />
                    </div>
                }
            </div>
        </div>

    </div>
</div>
<button class="submit-button offer" onclick="offerSwap(this)" disabled>Items Selected (0/@swapSize)</button>