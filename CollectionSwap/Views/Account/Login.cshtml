@model CollectionSwap.Models.AccountViewModel
@{
    ViewBag.Title = "Login";
    string statusMessage = ViewBag.Status;
    string errorMessage = ViewBag.Error;
}

<div class="status-container">
    @if (!String.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message">@statusMessage</div>
    }
    else if (!String.IsNullOrEmpty(errorMessage))
    {
        <div class="status-message error">@errorMessage</div>
    }
</div>
<div id="register-container">
    <section class="login-prompt exclamation squiggle" style="display: none">
        <h2>Have an Account?</h2>
        <button class="submit-button" onclick="SwitchRegisterForms(this)">Login</button>
    </section>

    <section class="login exclamation squiggle">
        @using (Html.BeginForm("Login", "Account", FormMethod.Post))
        {
            <h2>Welcome <em class="underline">Back</em></h2>
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => m.LoginViewModel.Email)
                @Html.TextBoxFor(m => m.LoginViewModel.Email)
                @Html.ValidationMessageFor(m => m.LoginViewModel.Email)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.LoginViewModel.Password)
                @Html.PasswordFor(m => m.LoginViewModel.Password)
                @Html.ValidationMessageFor(m => m.LoginViewModel.Password)
            </div>
            <button class="submit-button" type="submit">Login</button>
            <p>
                @Html.ActionLink("Forgot your password?", "ForgotPassword")
            </p>
        }
    </section>

    <section class="register-prompt exclamation squiggle">
        <h2>New Here?</h2>
        <button class="submit-button" onclick="SwitchRegisterForms(this)">Create Free Account</button>
    </section>

    <section class="register squiggle exclamation" style="display: none">
        @using (Html.BeginForm("Register", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { id = "register-form" }))
        {
            <h2>Create <em class="underline">Account</em></h2>
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => m.RegisterViewModel.Username)
                @Html.TextBoxFor(m => m.RegisterViewModel.Username)
                @Html.ValidationMessageFor(m => m.RegisterViewModel.Username)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.RegisterViewModel.Email)
                @Html.TextBoxFor(m => m.RegisterViewModel.Email)
                @Html.ValidationMessageFor(m => m.RegisterViewModel.Email)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.RegisterViewModel.Password)
                @Html.PasswordFor(m => m.RegisterViewModel.Password)
                @*@Html.ValidationMessageFor(m => m.RegisterViewModel.Password)*@
                <div class="password-validation">
                    <span class="upper" data-val-remote-url="/RemoteValidation/IsPasswordValid"><i class="fa-solid fa-circle"></i>At least one uppercase character</span>
                    <span class="number @((string)ViewData["number"] == "True" ? "valid" : "")"><i class="fa-solid fa-circle"></i>At least one number</span>
                    <span class="special @((string)ViewData["special"] == "True" ? "valid" : "")"><i class="fa-solid fa-circle"></i>@Html.Raw("At least one symbol (@$#!.)")</span>
                    <span class="length @((string)ViewData["length"] == "True" ? "valid" : "")"><i class="fa-solid fa-circle"></i>6 characters minimum</span>
                </div>
            </div>
            @*<div class="form-group">
                    @Html.LabelFor(m => m.RegisterViewModel.ConfirmPassword)
                    @Html.PasswordFor(m => m.RegisterViewModel.ConfirmPassword)
                    @Html.ValidationMessageFor(m => m.RegisterViewModel.ConfirmPassword)
                </div>*@

            <button class="submit-button" type="submit">Create Account</button>
            <button class="submit-button spinner d-none" type="submit" disabled><i class="fa-solid fa-spinner fa-spin"></i></button>
        }
    </section>

    <img src="~/Content/images/doodles/4.png" />
</div>

@section Scripts {
    <script src="~/Scripts/main.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function SwitchRegisterForms(e) {
            let button = $(e);
            let hiddenElements = $("section:hidden");
            let showingElements = $("section:visible");

            showingElements.fadeOut(100, () => {
                hiddenElements.fadeIn(100);
            });
        }
    </script>
}