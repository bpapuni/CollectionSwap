@model CollectionSwap.Models.Collection
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Edit";
    string statusMessage = ViewBag.Status;
    List<string> items = JsonConvert.DeserializeObject<List<string>>(Model.ItemListJSON);
    //var imageUrlList = ViewBag.ImageUrl as List<string>;
    //var imageId = imageUrlList?[0];
    //var imageUrl = imageUrlList?[1];
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("Edit", "Collections", FormMethod.Post, new { role = "form", @class = "d-flex flex-column align-items-center mt-5 mb-5" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group d-flex flex-row justify-content-center">
        @Html.Hidden("Id", Model.Id)
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        <input class="btn btn-primary mx-1" type="submit" value="Update Collection Name" />
    </div>
    <span class="text-success">@statusMessage</span>
}

<div>
    <a class="back-link" href="/Manage/Index"><i class="fa fa-arrow-circle-left"></i>&nbsp; Back to Dashboard</a>
</div>

<div id="items" class="d-flex gap-5 flex-wrap">
    @foreach (var item in items)
    {
        var imagePath = $"~/Collections/{Model.Id}";
        var itemId = items.IndexOf(item) + 1;

        <div class="d-flex flex-column align-items-center">
            @(item.Split('?')[0])
            <img class="item" src="@Url.Content(imagePath)/@item" />
            <div class="d-flex gap-3">
                @using (Html.BeginForm("EditItem", "Collections", new { collectionId = @Model.Id, itemId = @itemId - 1, fileName = @item }, FormMethod.Post, new { enctype = "multipart/form-data", role = "form", @class = "mt-3" }))
                {
                    @Html.AntiForgeryToken()
                    <label for="fileInput@(itemId)" class="button-icon button-icon-upload"><i class="fa fa-upload"></i></label>
                    <input class="d-none" type="file" id="fileInput@(itemId)" name="fileInput">
                }
                @using (Html.BeginForm("DeleteItem", "Collections", new { collectionId = @Model.Id, fileName = @item }, FormMethod.Post, new { role = "form", @class = "mt-3" }))
                {
                    @Html.AntiForgeryToken()
                    <button class="button-icon button-icon-trash" type="submit" onclick="return confirm('Are you sure you want to delete this item?')"><i class="fa fa-trash"></i></button>
                }
            </div>
        </div>
    }
</div>

<div>
    <br />
    <a class="back-link" href="/Manage/Index"><i class="fa fa-arrow-circle-left"></i>&nbsp; Back to Dashboard</a>
</div>

<div>
    @using (Html.BeginForm("CreateItem", "Collections", new { collectionId = @Model.Id }, FormMethod.Post, new { enctype = "multipart/form-data", role = "form", @class = "mt-3" }))
    {
        @Html.AntiForgeryToken()
        <label for="createItemInput" class="create-item"><i class="fa fa-plus"></i></label>
        <input class="d-none" type="file" accept=".png, .jpg" id="createItemInput" name="fileInput">
    }
</div>


@section scripts {
    <script>
        const collectionId = window.location.href.split("Collections/Edit/")[1];

        $("input[type='file']").on("change", function () {
            $(this).closest("form").submit();
        })

        //$.ajax({
        //    url: "/Collections/Refresh",
        //    type: "POST",
        //    data: { id: collectionId },
        //    dataType: "json",
        //    success: function (response) {
        //        console.log("Success");
        //    },
        //    error: function (xhr, status, error) {
        //    }
        //})

        //$("#items").sortable({
        //    update: function (event, ui) {
        //        // Called when the order changes after dragging
        //        // You can handle the reordering logic here, e.g., send the new order to the server
        //        // For this example, we will just log the new order
        //        const newOrder = $(this).sortable("toArray", { attribute: "data-id" });
        //        console.log(newOrder);
        //    }
        //});
    </script>
}